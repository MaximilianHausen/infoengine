package org.totogames.infoengine.rendering.opengl.enums;

import static org.lwjgl.opengl.GL46C.*;

public enum TextureInternalFormat {
    RED(GL_RED),
    RG(GL_RG),
    RGB(GL_RGB),
    RGBA(GL_RGBA),
    DEPTH_COMPONENT(GL_DEPTH_COMPONENT),
    DEPTH_STENCIL(GL_DEPTH_STENCIL),
    R8(GL_R8),
    R8_SNORM(GL_R8_SNORM),
    R16(GL_R16),
    R16_SNORM(GL_R16_SNORM),
    RG8(GL_RG8),
    RG8_SNORM(GL_RG8_SNORM),
    RG16(GL_RG16),
    RG16_SNORM(GL_RG16_SNORM),
    R3_G3_B2(GL_R3_G3_B2),
    RGB4(GL_RGB4),
    RGB5(GL_RGB5),
    RGB565(GL_RGB565),
    RGB8(GL_RGB8),
    RGB8_SNORM(GL_RGB8_SNORM),
    RGB10(GL_RGB10),
    RGB12(GL_RGB12),
    RGB16(GL_RGB16),
    RGB16_SNORM(GL_RGB16_SNORM),
    RGBA2(GL_RGBA2),
    RGBA4(GL_RGBA4),
    RGB5_A1(GL_RGB5_A1),
    RGBA8(GL_RGBA8),
    RGBA8_SNORM(GL_RGBA8_SNORM),
    RGB10_A2(GL_RGB10_A2),
    RGB10_A2UI(GL_RGB10_A2UI),
    RGBA12(GL_RGBA12),
    RGBA16(GL_RGBA16),
    RGBA16_SNORM(GL_RGBA16_SNORM),
    SRGB8(GL_SRGB8),
    SRGB8_ALPHA8(GL_SRGB8_ALPHA8),
    R16F(GL_R16F),
    RG16F(GL_RG16F),
    RGB16F(GL_RGB16F),
    RGBA16F(GL_RGBA16F),
    R32F(GL_R32F),
    RG32F(GL_RG32F),
    RGB32F(GL_RGB32F),
    RGBA32F(GL_RGBA32F),
    R11F_G11F_B10F(GL_R11F_G11F_B10F),
    RGB9_E5(GL_RGB9_E5),
    R8I(GL_R8I),
    R8UI(GL_R8UI),
    R16I(GL_R16I),
    R16UI(GL_R16UI),
    R32I(GL_R32I),
    R32UI(GL_R32UI),
    RG8I(GL_RG8I),
    RG8UI(GL_RG8UI),
    RG16I(GL_RG16I),
    RG16UI(GL_RG16UI),
    RG32I(GL_RG32I),
    RG32UI(GL_RG32UI),
    RGB8I(GL_RGB8I),
    RGB8UI(GL_RGB8UI),
    RGB16I(GL_RGB16I),
    RGB16UI(GL_RGB16UI),
    RGB32I(GL_RGB32I),
    RGB32UI(GL_RGB32UI),
    RGBA8I(GL_RGBA8I),
    RGBA8UI(GL_RGBA8UI),
    RGBA16I(GL_RGBA16I),
    RGBA16UI(GL_RGBA16UI),
    RGBA32I(GL_RGBA32I),
    RGBA32UI(GL_RGBA32UI),
    DEPTH_COMPONENT16(GL_DEPTH_COMPONENT16),
    DEPTH_COMPONENT24(GL_DEPTH_COMPONENT24),
    DEPTH_COMPONENT32(GL_DEPTH_COMPONENT32),
    DEPTH24_STENCIL8(GL_DEPTH24_STENCIL8),
    DEPTH_COMPONENT32F(GL_DEPTH_COMPONENT32F),
    DEPTH32F_STENCIL8(GL_DEPTH32F_STENCIL8),
    COMPRESSED_RED(GL_COMPRESSED_RED),
    COMPRESSED_RG(GL_COMPRESSED_RG),
    COMPRESSED_RGB(GL_COMPRESSED_RGB),
    COMPRESSED_RGBA(GL_COMPRESSED_RGBA),
    COMPRESSED_SRGB(GL_COMPRESSED_SRGB),
    COMPRESSED_SRGB_ALPHA(GL_COMPRESSED_SRGB_ALPHA),
    COMPRESSED_RED_RGTC1(GL_COMPRESSED_RED_RGTC1),
    COMPRESSED_SIGNED_RED_RGTC1(GL_COMPRESSED_SIGNED_RED_RGTC1),
    COMPRESSED_RG_RGTC2(GL_COMPRESSED_RG_RGTC2),
    COMPRESSED_SIGNED_RG_RGTC2(GL_COMPRESSED_SIGNED_RG_RGTC2),
    COMPRESSED_RGBA_BPTC_UNORM(GL_COMPRESSED_RGBA_BPTC_UNORM),
    COMPRESSED_SRGB_ALPHA_BPTC_UNORM(GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM),
    COMPRESSED_RGB_BPTC_SIGNED_FLOAT(GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT),
    COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT(GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT),
    COMPRESSED_RGB8_ETC2(GL_COMPRESSED_RGB8_ETC2),
    COMPRESSED_SRGB8_ETC2(GL_COMPRESSED_SRGB8_ETC2),
    COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2(GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2),
    COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2(GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2),
    COMPRESSED_RGBA8_ETC2_EAC(GL_COMPRESSED_RGBA8_ETC2_EAC),
    COMPRESSED_SRGB8_ALPHA8_ETC2_EAC(GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC),
    COMPRESSED_R11_EAC(GL_COMPRESSED_R11_EAC),
    COMPRESSED_SIGNED_R11_EAC(GL_COMPRESSED_SIGNED_R11_EAC),
    COMPRESSED_RG11_EAC(GL_COMPRESSED_RG11_EAC),
    COMPRESSED_SIGNED_RG11_EAC(GL_COMPRESSED_SIGNED_RG11_EAC);

    private final int value;

    TextureInternalFormat(int value) {
        this.value = value;
    }

    public int getValue() {
        return value;
    }

    public TextureInternalFormat getBaseFormat() {
        //TODO: Compressed formats and RGB565
        return switch (this) {
            case RED, RG, RGB, RGBA, DEPTH_COMPONENT, DEPTH_STENCIL, COMPRESSED_RED, COMPRESSED_RG, COMPRESSED_RGB, COMPRESSED_RGBA -> this;
            case R8, R8_SNORM, R16, R16_SNORM, R16F, R32F, R8I, R8UI, R16I, R16UI, R32I, R32UI -> RED;
            case RG8, RG8_SNORM, RG16, RG16_SNORM, RG16F, RG32F, RG8I, RG8UI, RG16I, RG16UI, RG32I, RG32UI -> RG;
            case R3_G3_B2, RGB4, RGB5, RGB8, RGB8_SNORM, RGB10, RGB12, RGB16, RGB16_SNORM, RGBA2, RGBA4, SRGB8, RGB16F, RGB32F, R11F_G11F_B10F, RGB9_E5, RGB8I, RGB8UI, RGB16I, RGB16UI, RGB32I, RGB32UI -> RGB;
            case RGB5_A1, RGBA8, RGBA8_SNORM, RGB10_A2, RGB10_A2UI, RGBA12, RGBA16, RGBA16_SNORM, SRGB8_ALPHA8, RGBA16F, RGBA32F, RGBA8I, RGBA8UI, RGBA16I, RGBA16UI, RGBA32I, RGBA32UI -> RGBA;
            case DEPTH_COMPONENT16, DEPTH_COMPONENT24, DEPTH_COMPONENT32, DEPTH_COMPONENT32F -> DEPTH_COMPONENT;
            case DEPTH24_STENCIL8, DEPTH32F_STENCIL8 -> DEPTH_STENCIL;
            default -> this;
        };
    }

    public boolean isSized() {
        return switch (this) {
            case RED, RG, RGB, RGBA, DEPTH_COMPONENT, DEPTH_STENCIL, COMPRESSED_RED, COMPRESSED_RG, COMPRESSED_RGB, COMPRESSED_RGBA -> false;
            default -> true;
        };
    }
}
