plugins {
    id 'java-library'
    id 'maven-publish'
}

group 'org.totodev'
version '0.1'

project.ext.lwjglVersion = '3.3.1'

repositories {
    mavenCentral()
}

java {
    withSourcesJar()
    withJavadocJar()
    registerFeature('x64windows') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('x86windows') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('arm64windows') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('x64linux') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('arm64linux') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('arm32linux') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('x64macos') {
        usingSourceSet(sourceSets.main)
    }
    registerFeature('arm64macos') {
        usingSourceSet(sourceSets.main)
    }
}

dependencies {
    ext.allPlatformsNative = { baseDependency ->
        x64windowsRuntimeOnly "$baseDependency:natives-windows"
        x86windowsRuntimeOnly "$baseDependency:natives-windows-x86"
        arm64windowsRuntimeOnly "$baseDependency:natives-windows-arm64"

        x64linuxRuntimeOnly "$baseDependency:natives-linux"
        arm64linuxRuntimeOnly "$baseDependency:natives-linux-arm64"
        arm32linuxRuntimeOnly "$baseDependency:natives-linux-arm32"

        x64macosRuntimeOnly "$baseDependency:natives-macos"
        arm64macosRuntimeOnly "$baseDependency:natives-macos-arm64"
    }

    implementation 'org.eclipse.collections:eclipse-collections:11.0.0'
    api 'org.eclipse.collections:eclipse-collections-api:11.0.0'
    api 'org.joml:joml:1.10.4'

    implementation "org.lwjgl:lwjgl:$lwjglVersion"
    api "org.lwjgl:lwjgl-vulkan:$lwjglVersion"

    allPlatformsNative "org.lwjgl:lwjgl:$lwjglVersion"
}

publishing {
    publications {
        snapshot(MavenPublication) {
            from components.java
            pom {
                name = 'VkBuilder'
                version = project.getVersion() + '-SNAPSHOT'
                description = 'Builder-style vulkan wrapper library'
                url = 'https://github.com/MaximilianHausen/infoengine/tree/master/vulkan'
                licenses {
                    license {
                        name = 'Mozilla Public License 2.0'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
            }
        }
        release(MavenPublication) {
            from components.java
            pom {
                name = 'VkBuilder'
                version = project.getVersion()
                description = 'Builder-style vulkan wrapper library'
                url = 'https://github.com/MaximilianHausen/infoengine/tree/master/vulkan'
                licenses {
                    license {
                        name = 'Mozilla Public License 2.0'
                        url = 'https://www.mozilla.org/en-US/MPL/2.0/'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = 'snapshot'
            url = uri("https://maven.totodev.de/snapshots")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = 'release'
            url = uri("https://maven.totodev.de/releases")
            credentials {
                username = System.getenv("MAVEN_USERNAME")
                password = System.getenv("MAVEN_PASSWORD")
            }
        }
    }
}

tasks.withType(PublishToMavenRepository) {
    onlyIf {
        (repository == publishing.repositories.snapshot && publication == publishing.publications.snapshot) ||
                (repository == publishing.repositories.release && publication == publishing.publications.release)
    }
}
